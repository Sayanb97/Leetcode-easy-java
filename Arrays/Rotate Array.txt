With stack O(N)

class Solution {
    public void rotate(int[] nums, int k) {
        int len = nums.length;
        k = k % len;
        Stack<Integer> s = new Stack<Integer>();
        for(int i=1; i<=k; i++) {
            s.push(nums[len-i]);
        }
        for(int i=len-k-1; i>=0; i--) {
            nums[i+k] = nums[i];
        }
        for(int i=0; i<k; i++) {
            nums[i] = s.peek();
            s.pop();
        }
    }
}

Without extra memory O(1)

class Solution {
    public void rotate(int[] nums, int k) {
        int len = nums.length;
        k = k % len;
        reverse(nums, 0, len-1);
        reverse(nums, 0, k-1);
        reverse(nums, k, len-1);
    }
    
    public void reverse(int nums[], int start, int end) {
        while(start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }
    
    public void swap(int nums[], int i, int j) {
        nums[i] = nums[i] + nums[j];
        nums[j] = nums[i] - nums[j];
        nums[i] = nums[i] - nums[j];
    }
}